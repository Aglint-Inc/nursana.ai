create type "public"."app_role" as enum ('nurse', 'hospital', 'doctor', 'therapist');

revoke delete on table "public"."tenant_hospital_access" from "anon";

revoke insert on table "public"."tenant_hospital_access" from "anon";

revoke references on table "public"."tenant_hospital_access" from "anon";

revoke select on table "public"."tenant_hospital_access" from "anon";

revoke trigger on table "public"."tenant_hospital_access" from "anon";

revoke truncate on table "public"."tenant_hospital_access" from "anon";

revoke update on table "public"."tenant_hospital_access" from "anon";

revoke delete on table "public"."tenant_hospital_access" from "authenticated";

revoke insert on table "public"."tenant_hospital_access" from "authenticated";

revoke references on table "public"."tenant_hospital_access" from "authenticated";

revoke select on table "public"."tenant_hospital_access" from "authenticated";

revoke trigger on table "public"."tenant_hospital_access" from "authenticated";

revoke truncate on table "public"."tenant_hospital_access" from "authenticated";

revoke update on table "public"."tenant_hospital_access" from "authenticated";

revoke delete on table "public"."tenant_hospital_access" from "service_role";

revoke insert on table "public"."tenant_hospital_access" from "service_role";

revoke references on table "public"."tenant_hospital_access" from "service_role";

revoke select on table "public"."tenant_hospital_access" from "service_role";

revoke trigger on table "public"."tenant_hospital_access" from "service_role";

revoke truncate on table "public"."tenant_hospital_access" from "service_role";

revoke update on table "public"."tenant_hospital_access" from "service_role";

revoke delete on table "public"."tenants" from "anon";

revoke insert on table "public"."tenants" from "anon";

revoke references on table "public"."tenants" from "anon";

revoke select on table "public"."tenants" from "anon";

revoke trigger on table "public"."tenants" from "anon";

revoke truncate on table "public"."tenants" from "anon";

revoke update on table "public"."tenants" from "anon";

revoke delete on table "public"."tenants" from "authenticated";

revoke insert on table "public"."tenants" from "authenticated";

revoke references on table "public"."tenants" from "authenticated";

revoke select on table "public"."tenants" from "authenticated";

revoke trigger on table "public"."tenants" from "authenticated";

revoke truncate on table "public"."tenants" from "authenticated";

revoke update on table "public"."tenants" from "authenticated";

revoke delete on table "public"."tenants" from "service_role";

revoke insert on table "public"."tenants" from "service_role";

revoke references on table "public"."tenants" from "service_role";

revoke select on table "public"."tenants" from "service_role";

revoke trigger on table "public"."tenants" from "service_role";

revoke truncate on table "public"."tenants" from "service_role";

revoke update on table "public"."tenants" from "service_role";

alter table "public"."hospitals" drop constraint "hospitals_tenant_id_fkey";

alter table "public"."tenant_hospital_access" drop constraint "tenant_hospital_access_hospital_id_fkey";

alter table "public"."tenant_hospital_access" drop constraint "tenant_hospital_access_tenant_id_fkey";

alter table "public"."user_tenant_access" drop constraint "user_tenant_access_tenant_id_fkey";

alter table "public"."interview_analysis" drop constraint "fk_hospital";

alter table "public"."resumes" drop constraint "nurse_resumes_hospital_id_fkey";

alter table "public"."tenant_hospital_access" drop constraint "tenant_hospital_access_pkey";

alter table "public"."tenants" drop constraint "tenants_pkey";

alter table "public"."hospitals" drop constraint "hospitals_pkey";

alter table "public"."user_tenant_access" drop constraint "user_tenant_access_pkey";

drop index if exists "public"."tenant_hospital_access_pkey";

drop index if exists "public"."tenants_pkey";

drop index if exists "public"."hospitals_pkey";

drop index if exists "public"."user_tenant_access_pkey";

drop table "public"."tenant_hospital_access";

drop table "public"."tenants";

create table "public"."user_roles" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "role" app_role not null
);


alter table "public"."campaigns" add column "description" text;

alter table "public"."hospitals" drop column "hospital_id";

alter table "public"."hospitals" drop column "tenant_id";

alter table "public"."hospitals" add column "id" uuid not null default gen_random_uuid();

alter table "public"."interview_analysis" add column "call_analysis" jsonb;

alter table "public"."interview_analysis" add column "transcript" text;

alter table "public"."interview_analysis" add column "transcript_json" jsonb[];

alter table "public"."interviews" drop column "template_version";

alter table "public"."nurses" add column "expected_salary" numeric;

alter table "public"."nurses" add column "job_type" text;

alter table "public"."nurses" add column "preferred_job_titles" text[] default '{}'::text[];

alter table "public"."nurses" add column "preferred_locations" text[] default '{}'::text[];

alter table "public"."nurses" add column "travel_preference" text;

alter table "public"."resumes" add column "error_status" jsonb;

alter table "public"."user_tenant_access" drop column "tenant_id";

alter table "public"."user_tenant_access" add column "hospital_id" uuid not null;

alter table "public"."user_tenant_access" add column "id" uuid not null default gen_random_uuid();

CREATE UNIQUE INDEX user_roles_pkey ON public.user_roles USING btree (id);

CREATE UNIQUE INDEX user_roles_user_id_role_key ON public.user_roles USING btree (user_id, role);

CREATE UNIQUE INDEX hospitals_pkey ON public.hospitals USING btree (id);

CREATE UNIQUE INDEX user_tenant_access_pkey ON public.user_tenant_access USING btree (id);

alter table "public"."user_roles" add constraint "user_roles_pkey" PRIMARY KEY using index "user_roles_pkey";

alter table "public"."hospitals" add constraint "hospitals_pkey" PRIMARY KEY using index "hospitals_pkey";

alter table "public"."user_tenant_access" add constraint "user_tenant_access_pkey" PRIMARY KEY using index "user_tenant_access_pkey";

alter table "public"."user_roles" add constraint "user_roles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."user_roles" validate constraint "user_roles_user_id_fkey";

alter table "public"."user_roles" add constraint "user_roles_user_id_role_key" UNIQUE using index "user_roles_user_id_role_key";

alter table "public"."interview_analysis" add constraint "fk_hospital" FOREIGN KEY (hospital_id) REFERENCES hospitals(id) not valid;

alter table "public"."interview_analysis" validate constraint "fk_hospital";

alter table "public"."resumes" add constraint "nurse_resumes_hospital_id_fkey" FOREIGN KEY (hospital_id) REFERENCES hospitals(id) not valid;

alter table "public"."resumes" validate constraint "nurse_resumes_hospital_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 STABLE
AS $function$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Fetch the user role in the user_roles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$function$
;

CREATE OR REPLACE FUNCTION public.post_process_interview()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    PERFORM net.http_post(
        url := 'https://nursana.ai/api/backup-interview-data',
        headers := '{"Content-Type": "application/json"}'::jsonb,
        body := json_build_object('interview_analysis_id', NEW.id)::jsonb
    );
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."user_roles" to "service_role";

grant insert on table "public"."user_roles" to "service_role";

grant references on table "public"."user_roles" to "service_role";

grant select on table "public"."user_roles" to "service_role";

grant trigger on table "public"."user_roles" to "service_role";

grant truncate on table "public"."user_roles" to "service_role";

grant update on table "public"."user_roles" to "service_role";

grant delete on table "public"."user_roles" to "supabase_auth_admin";

grant insert on table "public"."user_roles" to "supabase_auth_admin";

grant references on table "public"."user_roles" to "supabase_auth_admin";

grant select on table "public"."user_roles" to "supabase_auth_admin";

grant trigger on table "public"."user_roles" to "supabase_auth_admin";

grant truncate on table "public"."user_roles" to "supabase_auth_admin";

grant update on table "public"."user_roles" to "supabase_auth_admin";

create policy "Allow auth admin to read user roles"
on "public"."user_roles"
as permissive
for select
to supabase_auth_admin
using (true);


CREATE TRIGGER interview_analysis AFTER UPDATE OF video_url ON public.interview_analysis FOR EACH ROW EXECUTE FUNCTION post_process_interview();


